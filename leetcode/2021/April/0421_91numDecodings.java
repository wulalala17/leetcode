/*
91. 解码方法

一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：

'A' -> 1
'B' -> 2
...
'Z' -> 26

要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：
    "AAJF" ，将消息分组为 (1 1 10 6)
    "KJF" ，将消息分组为 (11 10 6)

注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。
给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。
题目数据保证答案肯定是一个 32 位 的整数。



示例 1：
输入：s = "12"
输出：2
解释：它可以解码为 "AB"（1 2）或者 "L"（12）。

示例 2：
输入：s = "226"
输出：3
解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。

示例 3：
输入：s = "0"
输出：0
解释：没有字符映射到以 0 开头的数字。
含有 0 的有效映射是 'J' -> "10" 和 'T'-> "20" 。
由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。

示例 4：
输入：s = "06"
输出：0
解释："06" 不能映射到 "F" ，因为字符串含有前导 0（"6" 和 "06" 在映射中并不等价）。



提示：

    1 <= s.length <= 100
    s 只包含数字，并且可能包含前导零。
*/
class Solution { //写了1h20min 一开始两个状态一直错，后面想清楚是三个状态才写对了，还是题解的简洁，但写出来看到1ms击败100%还是很爽
    public int numDecodings(String s) {
        int n = s.length();
        if (s.charAt(0) == '0') //第一个字母是0则不能解码
            return 0;
        if (n == 1)
            return 1;

        int[] dp0 = new int[n];//跟前一个字符组合
        int[] dp1 = new int[n];//单独自己解码
        int[] dp2 = new int[n];//留着给下一个字符组合
        dp0[0] = 0;
        dp1[0] = 1;
        char x;
        if (s.charAt(0) == '1' || s.charAt(0) == '2')
            dp2[0] = 1;
        else{
            dp2[0] = 0;
        }
        for(int i = 1; i < n; i++){
            x = s.charAt(i);
            if(x == '0'){//为0只能跟前一个字符组合
                if (s.charAt(i-1) == '1' || s.charAt(i-1) == '2'){
                    dp0[i] = dp2[i-1];
                    dp1[i] = 0;
                    dp2[i] = 0;
                }
                else{
                    return 0;
                }
            }
            else{
                if (s.charAt(i-1) == '1'){
                    dp0[i] = dp2[i-1];
                    dp1[i] = dp0[i-1] + dp1[i-1];
                    dp2[i] = dp0[i-1] + dp1[i-1];
                }
                else if(s.charAt(i-1) == '2'){
                    if (x > '6'){
                        dp0[i] = 0;
                        dp1[i] = dp0[i-1] + dp1[i-1];
                        dp2[i] = dp0[i-1] + dp1[i-1];
                    }
                    else{
                        dp0[i] = dp2[i-1];
                        dp1[i] = dp0[i-1] + dp1[i-1];
                        dp2[i] = dp0[i-1] + dp1[i-1];
                    }
                }
                else{
                    dp0[i] = 0;
                    dp1[i] = dp0[i-1] + dp1[i-1];
                    dp2[i] = dp0[i-1] + dp1[i-1];
                }
            }
        }
        return dp0[n-1] + dp1[n-1];
    }
}